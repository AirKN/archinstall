#!/bin/bash
#
# Arch custom install script
# written by and mostly for:
#
#  _
# | |__ __  ___   _ ____
# | '_ \\ \/ / | | |_  /
# | | | |>  <| |_| |/ /
# |_| |_/_/\_\\__, /___|
#             |___/
#
# github.com/hamedxyz

#part1
echo "Script started, partitioning and user info are manual"
sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 15/" /etc/pacman.conf
lsblk
read -p "Drive (sd_): " drive
cfdisk /dev/$drive
clear
lsblk
read -p "Boot partition (sd_#): " bootpart
read -p "Linux (/) partition (sd_#): " partition
read -p "Swap partition (if u created one) [swappart(sd_#) /n] " swappart
mkfs.fat -F 32 /dev/$bootpart
mkfs.ext4 /dev/$partition
if [[ "$swappart" != n ]] ; then
  mkswap /dev/$swappart
  swapon /dev/$swappart
fi

#read -p "Did you also create efi partition? [y/n]" answer
#if [[ $answer = y ]] ; then
#  echo "Enter EFI partition: "
#  read efipartition
#  mkfs.vfat -F 32 $efipartition
#fi

clear
lsblk
mount /dev/$partition /mnt
mkdir /mnt/boot
mount /dev/$bootpart /mnt/boot
lsblk
pacman --noconfirm -Sy archlinux-keyring
pacman-key --init && pacman-key --populate archlinux
pacstrap /mnt base base-devel linux linux-firmware vim
genfstab -U /mnt >> /mnt/etc/fstab
sed '1,/^#part2$/d' `basename $0` > /mnt/archinstall2.sh
chmod +x /mnt/archinstall2.sh
cd /mnt
arch-chroot /mnt ./archinstall2.sh
exit

#part2
clear
sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 15/" /etc/pacman.conf

# all user input is at the start for convenience, u just answer the questions together n watch/ wait for it to complete the installation (pretty generic when it comes to os installers doe nothing special)

read -p "Enter ur timezone [Continent/City] " timezn

read -p "Hostname: " hostname
passwd

lsblk
read -p "Drive to install Grub bootloader on (sd_): " drive

read -p "Username: " name
passwd $name

read -p "Additional packages you'd like to install? [y/n] " answer1
if [[ "$answer1" = y ]] ; then
  read -p "Which packages? " packages
fi


ln -sf /usr/share/zoneinfo/$timezn /etc/localtime
hwclock --systohc
timedatectl set-timezone $timezn

#timedatectl set-ntp true

echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "ar_TN.UTF-8 UTF-8" >> /etc/locale.gen
echo "ja_JP.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
echo $hostname > /etc/hostname
echo "127.0.0.1       localhost" >> /etc/hosts
echo "::1             localhost" >> /etc/hosts
echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts
pacman --noconfirm -S networkmanager grub
systemctl enable NetworkManager
grub-install /dev/$drive
grub-mkconfig -o /boot/grub/grub.cfg

# make pacman colorful, concurrent downloads and Pacman eye-candy.
grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf
# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//" /etc/makepkg.conf

# dont ask for password when using sudo
echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
echo "Defaults !tty_tickets" >> /etc/sudoers
useradd -mg wheel "$name"
chown -R $name:wheel /home/$name
chmod 700 /home/$name

# gets rid of beep
rmmod pcspkr
echo "blacklist pcspkr" >/etc/modprobe.d/nobeep.conf


echo "Installing needed base-devel packages.."
pacman --noconfirm -S --needed base-devel git


echo "Cloning and Moving dotfiles from github.."
sudo -u $name git clone https://github.com/hamedxyz/dotfiles /home/$name/dotfiles
mv /home/$name/dotfiles/* /home/$name/dotfiles/.* /home/$name
sudo -u $name mkdir -p /home/$name/downloads
sudo -u $name mkdir -p /home/$name/images
sudo -u $name mkdir -p /home/$name/programs
sudo -u $name mkdir -p /home/$name/repos

# a few packages in pacmanlist are from the multilib repo
echo "[multilib]" >> /etc/pacman.conf
echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
echo "" >> /etc/pacman.conf

echo "Installing packages from pacmanlist.."
curl -LO raw.githubusercontent.com/hamedxyz/archinstall/main/pacmanlist
pacman --noconfirm -Sy
while read p; do
    pacman --noconfirm -S "$p"
done <pacmanlist
# pacman -Rsu --noconfirm $(comm -23 <(pacman -Qq | sort) <(sort packagelist))

echo "Installing the Aur Helper (yay).."
cd /home/$name/repos
sudo -u $name git clone https://aur.archlinux.org/yay.git
chown -R $name:wheel yay
cd yay
sudo -u $name makepkg --noconfirm -si
cd /tmp
sudo -u $name yay -Syu --noconfirm

echo "Installing AUR packages from the aurlist.."
curl -LO raw.githubusercontent.com/hamedxyz/archinstall/main/aurlist
while read p; do
    sudo -u $name yay -S --noconfirm "$p"
done <aurlist

# making sure pulse is gone and pipewire is installed, i think it's downloaded by default with other packages while setting up the kernel
echo "Installing a few additional packages.."
pacman --noconfirm -R pulseaudio
pacman --noconfirm -S lib32-pipewire

#part3
echo "Cloning and Building the window manager & other programs from github repos.."
export repodir="/home/$name/.local/src"
sudo -u $name mkdir -p "$repodir"
#chown -R "$name":wheel "$(dirname "$repodir")"

sudo -u $name git clone https://github.com/hamedxyz/dwm $repodir/dwm
make -C $repodir/dwm install

sudo -u $name git clone https://github.com/hamedxyz/dwmblocks $repodir/dwmblocks
make -C $repodir/dwmblocks install

sudo -u $name git clone https://github.com/hamedxyz/st $repodir/st
make -C $repodir/st install

sudo -u $name git clone https://github.com/hamedxyz/dmenu $repodir/dmenu
make -C $repodir/dmenu install

sudo -u $name git clone https://github.com/hamedxyz/othersrc $repodir/othersrc
make -C $repodir/othersrc/sxiv install
make -C $repodir/othersrc/slock install
make -C $repodir/othersrc/sent install

echo "Installing nvim plugins//"
cp /usr/share/vim/vim90/defaults.vim /usr/share/nvim/runtime/
sudo -u $name nvim -c "PlugInstall|q|q"
chsh -s /bin/zsh "$name"
sudo -u $name mkdir /home/$name/.local/share/zsh
rm /bin/sh
ln -s /bin/dash /bin/sh

if [[ $answer1 = y ]] ; then
    pacman -S --noconfirm $packages
fi

rm -rf /home/$name/dotfiles


echo "Preparing afterinstall script list installer.."
curl -LO raw.githubusercontent.com/hamedxyz/archinstall/main/afterinstall
curl -LO raw.githubusercontent.com/hamedxyz/archinstall/main/afterlist
chmod +x afterinstall


clear
echo "Installation Complete. Please reboot now."

sleep 2s
exit
